{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class AuthorizationInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    // Add your interceptor logic here\n    // For example, add an Authorization header\n    const token = this.authService.getAuthToken();\n    console.log(token);\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    // Pass the modified request to the next handler\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function AuthorizationInterceptor_Factory(t) {\n    return new (t || AuthorizationInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorizationInterceptor,\n    factory: AuthorizationInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["AuthorizationInterceptor","constructor","authService","intercept","request","next","token","getAuthToken","console","log","clone","setHeaders","Authorization","handle","_","i0","ɵɵinject","i1","AuthService","_2","factory","ɵfac"],"sources":["/home/tapos/Desktop/Angular/eccom/client/src/app/authorization.interceptor.ts"],"sourcesContent":["\nimport { AuthService } from './auth.service';\n\nimport { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthorizationInterceptor implements HttpInterceptor {\n\n\n  constructor( private authService : AuthService){\n\n  }\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    // Add your interceptor logic here\n    // For example, add an Authorization header\n    const token = this.authService.getAuthToken()\n    console.log(token)\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    }\n\n    // Pass the modified request to the next handler\n    return next.handle(request);\n  }\n}"],"mappings":";;AAaA,OAAM,MAAOA,wBAAwB;EAGnCC,YAAqBC,WAAyB;IAAzB,KAAAA,WAAW,GAAXA,WAAW;EAEhC;EACAC,SAASA,CACPC,OAAyB,EACzBC,IAAiB;IAEjB;IACA;IACA,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,YAAY,EAAE;IAC7CC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;IAClB,IAAIA,KAAK,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACM,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUN,KAAK;;OAEjC,CAAC;;IAGJ;IACA,OAAOD,IAAI,CAACQ,MAAM,CAACT,OAAO,CAAC;EAC7B;EAAC,QAAAU,CAAA,G;qBAxBUd,wBAAwB,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAxBnB,wBAAwB;IAAAoB,OAAA,EAAxBpB,wBAAwB,CAAAqB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}