{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.USER_COOKIE_NAME = 'authUser'; // Cookie name for user data\n    this.TOKEN_COOKIE_NAME = 'authToken'; // Cookie name for the authentication token\n  }\n  // Store authentication data (user and token) in cookies\n  setAuthData(user, token, expirationHours = 2) {\n    // Store user data in a cookie\n    document.cookie = `${this.USER_COOKIE_NAME}=${JSON.stringify(user)}; expires=${this.getExpirationDate(expirationHours)}; path=/`;\n    // Store the authentication token in another cookie\n    document.cookie = `${this.TOKEN_COOKIE_NAME}=${token}; expires=${this.getExpirationDate(expirationHours)}; path=/`;\n  }\n  // Get user data from the cookie\n  getUserData() {\n    const userDataCookie = this.getCookie(this.USER_COOKIE_NAME);\n    if (userDataCookie) {\n      return JSON.parse(userDataCookie);\n    }\n    return null;\n  }\n  // Get authentication token from the cookie\n  getAuthToken() {\n    return this.getCookie(this.TOKEN_COOKIE_NAME);\n  }\n  // Check if the user is authenticated (token exists)\n  isAuthenticated() {\n    return !!this.getAuthToken();\n  }\n  // Remove user data and token (logout)\n  logout() {\n    this.deleteCookie(this.USER_COOKIE_NAME);\n    this.deleteCookie(this.TOKEN_COOKIE_NAME);\n  }\n  // Helper function to get the expiration date\n  getExpirationDate(expirationHours) {\n    const expirationDate = new Date();\n    expirationDate.setTime(expirationDate.getTime() + expirationHours * 60 * 60 * 1000);\n    return expirationDate.toUTCString();\n  }\n  // Helper function to get a cookie by name\n  getCookie(cookieName) {\n    const cookies = document.cookie.split(';');\n    for (const cookie of cookies) {\n      const [name, value] = cookie.trim().split('=');\n      if (name === cookieName) {\n        return decodeURIComponent(value);\n      }\n    }\n    return null;\n  }\n  // Helper function to delete a cookie by name\n  deleteCookie(cookieName) {\n    document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","USER_COOKIE_NAME","TOKEN_COOKIE_NAME","setAuthData","user","token","expirationHours","document","cookie","JSON","stringify","getExpirationDate","getUserData","userDataCookie","getCookie","parse","getAuthToken","isAuthenticated","logout","deleteCookie","expirationDate","Date","setTime","getTime","toUTCString","cookieName","cookies","split","name","value","trim","decodeURIComponent","_","_2","factory","ɵfac","providedIn"],"sources":["/home/tapos/Desktop/Angular/eccom/client/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private readonly USER_COOKIE_NAME = 'authUser'; // Cookie name for user data\n  private readonly TOKEN_COOKIE_NAME = 'authToken'; // Cookie name for the authentication token\n\n  constructor() {}\n\n  // Store authentication data (user and token) in cookies\n  setAuthData(user: any, token: string, expirationHours: number = 2): void {\n    // Store user data in a cookie\n    document.cookie = `${this.USER_COOKIE_NAME}=${JSON.stringify(user)}; expires=${this.getExpirationDate(expirationHours)}; path=/`;\n\n    // Store the authentication token in another cookie\n    document.cookie = `${this.TOKEN_COOKIE_NAME}=${token}; expires=${this.getExpirationDate(expirationHours)}; path=/`;\n  }\n\n  // Get user data from the cookie\n  getUserData(): any | null {\n    const userDataCookie = this.getCookie(this.USER_COOKIE_NAME);\n    if (userDataCookie) {\n      return JSON.parse(userDataCookie);\n    }\n    return null;\n  }\n\n  // Get authentication token from the cookie\n  getAuthToken(): string | null {\n    return this.getCookie(this.TOKEN_COOKIE_NAME);\n  }\n\n  // Check if the user is authenticated (token exists)\n  isAuthenticated(): boolean {\n    return !!this.getAuthToken();\n  }\n\n  // Remove user data and token (logout)\n  logout(): void {\n    this.deleteCookie(this.USER_COOKIE_NAME);\n    this.deleteCookie(this.TOKEN_COOKIE_NAME);\n  }\n\n  // Helper function to get the expiration date\n  private getExpirationDate(expirationHours: number): string {\n    const expirationDate = new Date();\n    expirationDate.setTime(expirationDate.getTime() + expirationHours * 60 * 60 * 1000);\n    return expirationDate.toUTCString();\n  }\n\n  // Helper function to get a cookie by name\n  private getCookie(cookieName: string): string | null {\n    const cookies = document.cookie.split(';');\n    for (const cookie of cookies) {\n      const [name, value] = cookie.trim().split('=');\n      if (name === cookieName) {\n        return decodeURIComponent(value);\n      }\n    }\n    return null;\n  }\n\n  // Helper function to delete a cookie by name\n  private deleteCookie(cookieName: string): void {\n    document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n  }\n}\n"],"mappings":";AAKA,OAAM,MAAOA,WAAW;EAItBC,YAAA;IAHiB,KAAAC,gBAAgB,GAAG,UAAU,CAAC,CAAC;IAC/B,KAAAC,iBAAiB,GAAG,WAAW,CAAC,CAAC;EAEnC;EAEf;EACAC,WAAWA,CAACC,IAAS,EAAEC,KAAa,EAAEC,eAAA,GAA0B,CAAC;IAC/D;IACAC,QAAQ,CAACC,MAAM,GAAG,GAAG,IAAI,CAACP,gBAAgB,IAAIQ,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,aAAa,IAAI,CAACO,iBAAiB,CAACL,eAAe,CAAC,UAAU;IAEhI;IACAC,QAAQ,CAACC,MAAM,GAAG,GAAG,IAAI,CAACN,iBAAiB,IAAIG,KAAK,aAAa,IAAI,CAACM,iBAAiB,CAACL,eAAe,CAAC,UAAU;EACpH;EAEA;EACAM,WAAWA,CAAA;IACT,MAAMC,cAAc,GAAG,IAAI,CAACC,SAAS,CAAC,IAAI,CAACb,gBAAgB,CAAC;IAC5D,IAAIY,cAAc,EAAE;MAClB,OAAOJ,IAAI,CAACM,KAAK,CAACF,cAAc,CAAC;;IAEnC,OAAO,IAAI;EACb;EAEA;EACAG,YAAYA,CAAA;IACV,OAAO,IAAI,CAACF,SAAS,CAAC,IAAI,CAACZ,iBAAiB,CAAC;EAC/C;EAEA;EACAe,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAACD,YAAY,EAAE;EAC9B;EAEA;EACAE,MAAMA,CAAA;IACJ,IAAI,CAACC,YAAY,CAAC,IAAI,CAAClB,gBAAgB,CAAC;IACxC,IAAI,CAACkB,YAAY,CAAC,IAAI,CAACjB,iBAAiB,CAAC;EAC3C;EAEA;EACQS,iBAAiBA,CAACL,eAAuB;IAC/C,MAAMc,cAAc,GAAG,IAAIC,IAAI,EAAE;IACjCD,cAAc,CAACE,OAAO,CAACF,cAAc,CAACG,OAAO,EAAE,GAAGjB,eAAe,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;IACnF,OAAOc,cAAc,CAACI,WAAW,EAAE;EACrC;EAEA;EACQV,SAASA,CAACW,UAAkB;IAClC,MAAMC,OAAO,GAAGnB,QAAQ,CAACC,MAAM,CAACmB,KAAK,CAAC,GAAG,CAAC;IAC1C,KAAK,MAAMnB,MAAM,IAAIkB,OAAO,EAAE;MAC5B,MAAM,CAACE,IAAI,EAAEC,KAAK,CAAC,GAAGrB,MAAM,CAACsB,IAAI,EAAE,CAACH,KAAK,CAAC,GAAG,CAAC;MAC9C,IAAIC,IAAI,KAAKH,UAAU,EAAE;QACvB,OAAOM,kBAAkB,CAACF,KAAK,CAAC;;;IAGpC,OAAO,IAAI;EACb;EAEA;EACQV,YAAYA,CAACM,UAAkB;IACrClB,QAAQ,CAACC,MAAM,GAAG,GAAGiB,UAAU,mDAAmD;EACpF;EAAC,QAAAO,CAAA,G;qBA9DUjC,WAAW;EAAA;EAAA,QAAAkC,EAAA,G;WAAXlC,WAAW;IAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}