{"ast":null,"code":"import _asyncToGenerator from \"/home/tapos/Desktop/Angular/eccom/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3000/products/allProducts';\n  }\n  fetchProducts() {\n    this.products$ = this.http.get(this.baseUrl).pipe(catchError(error => {\n      console.error('Error sending get request', error);\n      throw error;\n    }), tap(data => {\n      this.products$ = of(data);\n    }));\n    return this.products$;\n  }\n  getStoredProducts() {\n    if (this.products$) {\n      return this.products$;\n    } else {\n      return this.fetchProducts();\n    }\n  }\n  fetchProduct(id) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.products$) {\n        _this.products$.subscribe(data => {\n          _this.products = data;\n          let myproduct = _this.products.find(product => product._id == id);\n          _this.product$ = of(myproduct);\n        });\n      } else {\n        let product = yield _this.fetchProducts();\n        product.subscribe(data => {\n          _this.products = data;\n          let myproduct = _this.products.find(product => product._id == id);\n          _this.product$ = of(myproduct);\n          console.log(_this.product$);\n        });\n      }\n      return _this.product$;\n    })();\n  }\n  getProduct(id) {\n    return this.fetchProduct(id);\n  }\n  static #_ = this.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","catchError","tap","ProductService","constructor","http","baseUrl","fetchProducts","products$","get","pipe","error","console","data","getStoredProducts","fetchProduct","id","_this","_asyncToGenerator","subscribe","products","myproduct","find","product","_id","product$","log","getProduct","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/tapos/Desktop/Angular/eccom/client/src/app/product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n  private products$: Observable<any[]>;\n  products:any;\n  private product$: Observable<any[]>;\n  private baseUrl = 'http://localhost:3000/products/allProducts';\n\n  constructor(private http: HttpClient) { }\n\n  fetchProducts(): Observable<any[]> {\n    this.products$ = this.http.get<any[]>(this.baseUrl).pipe(\n      catchError((error) => {\n        console.error('Error sending get request', error);\n        throw error;\n      }),\n      tap((data) => {\n       \n        this.products$ = of(data);\n      })\n    );\n\n    return this.products$;\n  }\n\n  getStoredProducts(): Observable<any[]> {\n    if (this.products$) {\n      return this.products$;\n    } else {\n    \n      return this.fetchProducts();\n    }\n  }\n\n\n  async fetchProduct(id:any){\n    if(this.products$){\n      this.products$.subscribe(\n        (data) => {\n          this.products = data; \n          let myproduct = this.products.find(product => product._id == id)\n          this.product$ = of(myproduct)\n    \n        }\n      );\n    }\n    else{\n      let product = await this.fetchProducts()\n      product.subscribe(\n        (data) => {\n          this.products = data; \n          let myproduct = this.products.find(product => product._id == id)\n          this.product$ = of(myproduct)\n          console.log(this.product$)\n        }\n      );\n    }\n    \n    return this.product$\n  }\n\n  getProduct(id:any){\n   \n    \n      return this.fetchProduct(id);\n    \n  }\n}\n"],"mappings":";AAEA,SAAqBA,EAAE,QAAoB,MAAM;AACjD,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,4CAA4C;EAEtB;EAExCC,aAAaA,CAAA;IACX,IAAI,CAACC,SAAS,GAAG,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQ,IAAI,CAACH,OAAO,CAAC,CAACI,IAAI,CACtDT,UAAU,CAAEU,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb,CAAC,CAAC,EACFT,GAAG,CAAEW,IAAI,IAAI;MAEX,IAAI,CAACL,SAAS,GAAGR,EAAE,CAACa,IAAI,CAAC;IAC3B,CAAC,CAAC,CACH;IAED,OAAO,IAAI,CAACL,SAAS;EACvB;EAEAM,iBAAiBA,CAAA;IACf,IAAI,IAAI,CAACN,SAAS,EAAE;MAClB,OAAO,IAAI,CAACA,SAAS;KACtB,MAAM;MAEL,OAAO,IAAI,CAACD,aAAa,EAAE;;EAE/B;EAGMQ,YAAYA,CAACC,EAAM;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACvB,IAAGD,KAAI,CAACT,SAAS,EAAC;QAChBS,KAAI,CAACT,SAAS,CAACW,SAAS,CACrBN,IAAI,IAAI;UACPI,KAAI,CAACG,QAAQ,GAAGP,IAAI;UACpB,IAAIQ,SAAS,GAAGJ,KAAI,CAACG,QAAQ,CAACE,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,GAAG,IAAIR,EAAE,CAAC;UAChEC,KAAI,CAACQ,QAAQ,GAAGzB,EAAE,CAACqB,SAAS,CAAC;QAE/B,CAAC,CACF;OACF,MACG;QACF,IAAIE,OAAO,SAASN,KAAI,CAACV,aAAa,EAAE;QACxCgB,OAAO,CAACJ,SAAS,CACdN,IAAI,IAAI;UACPI,KAAI,CAACG,QAAQ,GAAGP,IAAI;UACpB,IAAIQ,SAAS,GAAGJ,KAAI,CAACG,QAAQ,CAACE,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,GAAG,IAAIR,EAAE,CAAC;UAChEC,KAAI,CAACQ,QAAQ,GAAGzB,EAAE,CAACqB,SAAS,CAAC;UAC7BT,OAAO,CAACc,GAAG,CAACT,KAAI,CAACQ,QAAQ,CAAC;QAC5B,CAAC,CACF;;MAGH,OAAOR,KAAI,CAACQ,QAAQ;IAAA;EACtB;EAEAE,UAAUA,CAACX,EAAM;IAGb,OAAO,IAAI,CAACD,YAAY,CAACC,EAAE,CAAC;EAEhC;EAAC,QAAAY,CAAA,G;qBAhEUzB,cAAc,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd9B,cAAc;IAAA+B,OAAA,EAAd/B,cAAc,CAAAgC,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}